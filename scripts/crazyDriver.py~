#!/usr/bin/env python
import rospy
import sys, os, inspect
from time import sleep

import logging
import random
import time

# Loads the cflib module
scriptsdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
packagedir = os.path.dirname(scriptsdir)
sys.path.insert(1, packagedir)

import cflib.crtp
from cflib.crazyflie import Crazyflie

class CrazyflieDriver(object):

    def __init__(self):
        
        # Initialize a crazyflie object
        self._cf = Crazyflie()

        # Register callbacks

        self._scan()
        
        self._cf.open_link(link_uri)

        self.connected = True

    def _cpu_flash_callback(self, name, value):
        """Specific callback for the cpu.flash parameter"""
        print('The connected Crazyflie has {}kb of flash'.format(value))

    def pub_trajectory(self):
        # TODO Write callback
        self.a = 1
        
    def pub_controller(self):
        self.a = 2
        
    def pub_estimator(self):
        self.a = 3
        
    def pub_setpoint(self):
        self.a = 4
        
    def _scan(self):
        """
        Scans for available crazyflies returning a list of uris
        """
        available = cflib.crtp.scan_interfaces()
        if len(available) > 0:
            print 'Found %d uris during scan, connecting to %s' % (len(available), available[0])
            return available[0]
            
        return None
            

    def __str__(self):
        return 'Crazyflie driver'

def main():
    # Initialize low level USB drivers
    cflib.crtp.init_drivers(enable_debug_driver=False)
    rospy.init_node('CrazyflieDriver')
    quad = CrazyflieDriver()
    rospy.spin()

if __name__ == '__main__':
    main()
