<?xml version="1.0"?>
<launch>
  <!-- Default startup settings -->
  <arg name="useKinect" default="0" />
  <arg name="useOptitrack" default="0" />
  <arg name="useUWBLPS" default="1" />
  <arg name="useCrazyflie" default="1" />
  <arg name="useSimulation" default="0" />
  <arg name="useInternal" default="1" />
  <arg name="useExternal" default="0" />
  
  <!-- Visualization settings -->
  <arg name="rviz_config" default="rviz_config.rviz"/>
  <arg name="rqt_pos_topics" default="/visualization/measured_pose/pose/position /visualization/reference_pose/pose/position"/>
  <group ns = "visualization">
    <!--node pkg="rviz" name="rviz" type="rviz" args="-d $(find crazy_ros)/config/$(arg rviz_config)" /-->
    <node pkg="tf" name="link1_broadcaster" type="static_transform_publisher" args="1 0 0 0 0 0 1 world lps 100" />
    <!--<node pkg="rqt_plot" name="pos_plot" type="rqt_plot" args="$(arg rqt_pos_topics)" />-->
    <!--node pkg="crazy_ros" name="visualization" type="visualizationNode.py" output="screen" args="$(find crazy_ros)/config/anchor_pos.yaml"/-->
  </group>
  
  <!-- Launches the kinect_vision project if applicable -->
  <group if = "$(arg useKinect)">
    <include file="$(find kinect_vision)/launch/kinect.launch" />
  </group>
        
  <!-- Launches the  driver and finds crazyflies if applicable -->
  <group if = "$(arg useCrazyflie)">
    <!--arg name="uri" default="radio://0/70/2M" /-->
    <arg name="uri" default="radio://0/35/2M" />
    <!--arg name="uri" default="radio://0/107/2M/E7E7E7E7BC"/-->
    <!--arg name="uri" default="radio://0/80/250K/E7E7E7E7E7"/-->
    <arg name="roll_trim" default="0" />
    <arg name="pitch_trim" default="0" />

    <include file="$(find crazyflie_driver)/launch/crazyflie_server.launch">
    </include>

    <group ns="crazyflie">
      <node pkg="crazyflie_driver" type="crazyflie_add" name="crazyflie_add" output="screen">
        <param name="uri" value="$(arg uri)" />
        <param name="tf_prefix" value="crazyflie" />
        <rosparam>
          genericLogTopics: ["log_range", "log_pos","log_cacheA","log_cacheB","log_qlength"]
          genericLogTopicFrequencies: [10, 10, 10, 10, 10]
          genericLogTopic_log_ref_Variables: ["reference.x", "reference.y", "reference.z", "reference.r", "reference.p", "reference.y"]
          genericLogTopic_log_pos_Variables: ["measured.x", "measured.y", "measured.z", "measured.r", "measured.p", "measured.y"]
          genericLogTopic_log_cacheA_Variables: ["testA.a", "testA.b", "testA.c", "testA.d", "testA.e", "testA.f"]
          genericLogTopic_log_cacheB_Variables: ["testB.a", "testB.b", "testB.c", "testB.d", "testB.e", "testB.f"]
          genericLogTopic_log_qlength_Variables: ["testLength.length"]
        </rosparam>
      </node>
    </group>
  </group>
 
 <!-- Launches the model node project if applicable -->
  <group if = "$(arg useSimulation)">
    <node
      name="quadcopterModel"
      pkg="crazy_ros"
      type="quadcopterSimNode.py"
      output="screen"
      args="$(find crazy_ros)/config/configparam.cnf"
    />
  </group>
  
  <!-- Launches the outer controllers if in external mode -->
  <group if = "$(arg useExternal)">
    <group ns="outer_controllers">
      <node
        name="TiMPC"
        pkg="crazy_ros"
        type="outerTiMPC.py"
        output="screen"
        args="$(find crazy_ros)/config/configparam.cnf 
              useKinect,$(arg useKinect)
              useOptitrack,$(arg useOptitrack)
              useUWBLPS,$(arg useUWBLPS)
              useCrazyflie,$(arg useCrazyflie)
              useSimulation,$(arg useSimulation)"
      />
      <node
        name="TvMPC"
        pkg="crazy_ros"
        type="outerTvMPC.py"
        output="screen"
        args="$(find crazy_ros)/config/configparam.cnf 
              useKinect,$(arg useKinect)
              useOptitrack,$(arg useOptitrack)
              useUWBLPS,$(arg useUWBLPS)
              useCrazyflie,$(arg useCrazyflie)
              useSimulation,$(arg useSimulation)"
      />
      <node
        name="TiLQR"
        pkg="crazy_ros"
        type="outerTiLQR.py"
        output="screen"
        args="$(find crazy_ros)/config/configparam.cnf 
              useKinect,$(arg useKinect)
              useOptitrack,$(arg useOptitrack)
              useUWBLPS,$(arg useUWBLPS)
              useCrazyflie,$(arg useCrazyflie)
              useSimulation,$(arg useSimulation)"
      />
      <node
        name="TvLQR"
        pkg="crazy_ros"
        type="outerTvLQR.py"
        output="screen"
        args="$(find crazy_ros)/config/configparam.cnf 
              useKinect,$(arg useKinect)
              useOptitrack,$(arg useOptitrack)
              useUWBLPS,$(arg useUWBLPS)
              useCrazyflie,$(arg useCrazyflie)
              useSimulation,$(arg useSimulation)"
      />
      <node
        name="PID"
        pkg="crazy_ros"
        type="outerPID.py"
        output="screen"
        args="$(find crazy_ros)/config/configparam.cnf 
              useKinect,$(arg useKinect)
              useOptitrack,$(arg useOptitrack)
              useUWBLPS,$(arg useUWBLPS)
              useCrazyflie,$(arg useCrazyflie)
              useSimulation,$(arg useSimulation)"
      />
      <node
        name="MAN"
        pkg="crazy_ros"
        type="outerMAN.py"
        output="screen"
        args="$(find crazy_ros)/config/configparam.cnf 
              useKinect,$(arg useKinect)
              useOptitrack,$(arg useOptitrack)
              useUWBLPS,$(arg useUWBLPS)
              useCrazyflie,$(arg useCrazyflie)
              useSimulation,$(arg useSimulation)"
      />
    </group>
  </group>
  <node
    name="master"
    pkg="crazy_ros"
    type="masterNode.py"
    output="screen"
    args="useKinect,$(arg useKinect)
          useOptitrack,$(arg useOptitrack)
          useUWBLPS,$(arg useUWBLPS)
          useCrazyflie,$(arg useCrazyflie)
          useSimulation,$(arg useSimulation)
          useInternal,$(arg useInternal)
          useExternal,$(arg useExternal)"
          
  />
</launch>
